import customtkinter as ctk
from tkinter import messagebox
from PIL import Image, ImageDraw, ImageFont, ImageTk
import random, string, pyttsx3, re


def make_captcha_text(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


def make_captcha_image(text):
    image = Image.new("RGB", (180, 60), "white")
    draw = ImageDraw.Draw(image)
    try:
        font = ImageFont.truetype("arial.ttf", 32)
    except:
        font = ImageFont.load_default()
    draw.text((20, 10), text, font=font, fill=(0, 0, 0))
    return image


class AuthApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Login and Register")
        self.state("zoomed")
        self.users = {}

        self.card = ctk.CTkFrame(self, corner_radius=20)
        self.card.place(relx=0.5, rely=0.5, anchor="center")

        self.register_page = ctk.CTkFrame(self.card)
        self.login_page = ctk.CTkFrame(self.card)
        self.register_page.grid(row=0, column=0, sticky="nsew")
        self.login_page.grid(row=0, column=0, sticky="nsew")

        self.build_register_page()
        self.build_login_page()
        self.show_register()

    def build_register_page(self):
        inner = ctk.CTkFrame(self.register_page)
        inner.pack(padx=40, pady=40)

        ctk.CTkLabel(inner, text="Register", font=("Arial", 28, "bold")).pack(pady=15)
        self.reg_username = ctk.CTkEntry(inner, placeholder_text="Username", width=300)
        self.reg_email = ctk.CTkEntry(inner, placeholder_text="Email", width=300)
        self.reg_password = ctk.CTkEntry(inner, placeholder_text="Password", show="*", width=300)
        self.reg_username.pack(pady=8)
        self.reg_email.pack(pady=8)
        self.reg_password.pack(pady=8)

        self.reg_captcha_label = ctk.CTkLabel(inner, text="")
        self.reg_captcha_label.pack(pady=6)
        self.reg_captcha_entry = ctk.CTkEntry(inner, placeholder_text="Enter Captcha", width=200)
        self.reg_captcha_entry.pack(pady=6)

        btn_frame = ctk.CTkFrame(inner)
        btn_frame.pack(pady=6)
        ctk.CTkButton(btn_frame, text="Refresh", command=self.refresh_reg_captcha).pack(side="left", padx=5)
        ctk.CTkButton(btn_frame, text="Audio", command=self.audio_reg_captcha).pack(side="left", padx=5)

        ctk.CTkButton(inner, text="Register", command=self.register).pack(pady=15)

        # NEW: Switch to login if already have an account
        switch_btn = ctk.CTkButton(
            inner,
            text="Already have an account? Login here",
            fg_color="transparent",
            text_color="blue",
            hover_color="lightgrey",
            command=self.show_login
        )
        switch_btn.pack(pady=5)

        self.refresh_reg_captcha()

    def build_login_page(self):
        inner = ctk.CTkFrame(self.login_page)
        inner.pack(padx=40, pady=40)

        ctk.CTkLabel(inner, text="Login", font=("Arial", 28, "bold")).pack(pady=15)
        self.login_username = ctk.CTkEntry(inner, placeholder_text="Username", width=300)
        self.login_password = ctk.CTkEntry(inner, placeholder_text="Password", show="*", width=300)
        self.login_username.pack(pady=8)
        self.login_password.pack(pady=8)

        self.login_captcha_label = ctk.CTkLabel(inner, text="")
        self.login_captcha_label.pack(pady=6)
        self.login_captcha_entry = ctk.CTkEntry(inner, placeholder_text="Enter Captcha", width=200)
        self.login_captcha_entry.pack(pady=6)

        btn_frame = ctk.CTkFrame(inner)
        btn_frame.pack(pady=6)
        ctk.CTkButton(btn_frame, text="Refresh", command=self.refresh_login_captcha).pack(side="left", padx=5)
        ctk.CTkButton(btn_frame, text="Audio", command=self.audio_login_captcha).pack(side="left", padx=5)

        ctk.CTkButton(inner, text="Login", command=self.login).pack(pady=15)

        self.refresh_login_captcha()

    def register(self):
        user = self.reg_username.get().strip()
        email = self.reg_email.get().strip()
        pw = self.reg_password.get().strip()
        cap_in = self.reg_captcha_entry.get().strip()

        if not user or not email or not pw or not cap_in:
            messagebox.showerror("Error", "Fill in all fields.")
            return

        # Email Validation
        email_pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
        if not re.match(email_pattern, email):
            messagebox.showerror("Error", "Enter a valid email address.")
            return

        # Password Validation
        pw_pattern = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
        if not re.match(pw_pattern, pw):
            messagebox.showerror(
                "Error",
                "Password must be at least 8 characters and include:\n"
                "- Uppercase letter\n- Lowercase letter\n- Number\n- Special character"
            )
            return

        if cap_in != self.reg_captcha_text:
            messagebox.showerror("Captcha Error", "Captcha does not match.")
            self.refresh_reg_captcha()
            return

        if user in self.users:
            messagebox.showerror("Error", "User already exists.")
            return

        self.users[user] = {"email": email, "password": pw}
        messagebox.showinfo("Success", "Account created! Please login.")

        # clear fields
        self.reg_username.delete(0, "end")
        self.reg_email.delete(0, "end")
        self.reg_password.delete(0, "end")
        self.reg_captcha_entry.delete(0, "end")
        self.show_login()

    def login(self):
        user = self.login_username.get().strip()
        pw = self.login_password.get().strip()
        cap_in = self.login_captcha_entry.get().strip()

        if not user or not pw or not cap_in:
            messagebox.showerror("Error", "Fill in all fields.")
            return
        if cap_in != self.login_captcha_text:
            messagebox.showerror("Captcha Error", "Captcha does not match.")
            self.refresh_login_captcha()
            return
        if user in self.users and self.users[user]["password"] == pw:
            messagebox.showinfo("Success", f"Welcome back, {user}!")
        else:
            messagebox.showerror("Login Failed", "Account not found. Please register.")
            self.show_register()

    def refresh_reg_captcha(self):
        text = make_captcha_text()
        self.reg_captcha_text = text
        img = make_captcha_image(text)
        self.reg_captcha_img = ImageTk.PhotoImage(img)
        self.reg_captcha_label.configure(image=self.reg_captcha_img, text="")

    def audio_reg_captcha(self):
        engine = pyttsx3.init()
        engine.say("The captcha is " + ", ".join(list(self.reg_captcha_text)))
        engine.runAndWait()

    def refresh_login_captcha(self):
        text = make_captcha_text()
        self.login_captcha_text = text
        img = make_captcha_image(text)
        self.login_captcha_img = ImageTk.PhotoImage(img)
        self.login_captcha_label.configure(image=self.login_captcha_img, text="")

    def audio_login_captcha(self):
        engine = pyttsx3.init()
        engine.say("The captcha is " + ", ".join(list(self.login_captcha_text)))
        engine.runAndWait()

    def show_register(self):
        self.register_page.tkraise()
        self.refresh_reg_captcha()

    def show_login(self):
        self.login_page.tkraise()
        self.refresh_login_captcha()


if __name__ == "__main__":
    ctk.set_appearance_mode("light")
    app = AuthApp()
    app.mainloop()
